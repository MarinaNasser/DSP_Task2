        
#-----------------------------------------------------Play Button-------------------------------------------------------------------------------------------------------------------------------------------------

        # st.button(label= "DISPLAY" ,#if not st.session_state["play_state"] else "PAUSE", 
        # disabled= not st.session_state['uploaded'], on_click= functions.Change_play_State())

        # if not st.session_state["play_state"]:
        #     st.audio(file_name)

# ----------------------------------------------------------------------fourier-------------------------------------------------------------------------------------------------------------------------------------------------------
time_step=0.05
time_vec=np.arange(0,10,time_step) #return evenly spaced time vector between [0,10]
period=5 
sig=(np.sin(2*np.pi*time_vec/period))+ 0.25*np.random.randn(time_vec.size) #for every 5*5 points, it completes a 1/4 cycle or every 20*5 points it completes 1 cycle +noise
sig_fft=fftpack.fft(sig)
amplitude=np.abs(sig_fft)
power=amplitude**2
phase=np.angle(sig_fft) #np.angle() return the angle of the complex argument
sample_freq=fftpack.fftfreq(sig.size, d=time_step) #return the discrete fourier transform sample frequencies
amp_freq=np.array([amplitude,sample_freq])
amp_position= amp_freq[0,:].argmax()
peak_freq = amp_freq[1, amp_position]
high_freq_fft = sig_fft.copy()
high_freq_fft[np.abs(sample_freq)> peak_freq]=0
filtered_Sig=fftpack.ifft(high_freq_fft) # return discrete inverse fourier transform of real or complex sequence


def remove_noise(original_Signal,sample_freq,peak_freq):
    original_Signal[np.abs(sample_freq)> peak_freq]=0
    filtered_Sig=fft.ifft(original_Signal) # return discrete inverse fourier transform of real or complex sequence
    return filtered_Sig
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------

# # Filter the beat at 3kHz
# filtered = uploaded_file.low_pass_filter(3000)
# # Mix our filtered beat with the new loop at -3dB
# final = filtered.overlay(loop2 - 3, loop=True)


 
#-------------------------------------------------------save--------------------------------------------------------------------------------------------------------
# finalSignalFigure1, finalSignalAxis1 = plt.subplot(2,1,1)
# plt.figure(figsize=(10, 8))
# plt.subplot(2,1,1)
# plt.plot(time, equalized,'-b',label=r"$Filtered amplitude(t)$")
# plt.xlabel('time[s]')
# finalSignalFigure2, finalSignalAxis2 = plt.subplot(2,1,1)
# # plt.plot(time, data,'-r',label=r"$Original amplitude(t)$")
# plt.xlabel('time[s]')
# plt.legend()
# plt.grid()
# finalSignalAxis1.plot(time, equalized,linewidth=4)
# finalSignalAxis2.plot(time, data,linewidth=4)
# plt.subplot(2,1,2)
# plt.plot(f[:N//2],np.abs(F_data[:N//2]),'-r',label=r"$Original magnitude(f)$")
# plt.xlabel('f [Hz]')
# plt.xlim([0,5e3])
# plt.plot(f[:N//2],np.abs(Y[:N//2]),'-b',label=r"$Filtered magnitude(f)$")
# plt.xlabel('f [Hz]')
# plt.xlim([0,5e3])
# plt.legend()
# plt.tight_layout()
# plt.grid()






def plot_spectrogram(data,ftt_file,samplerate):
#     FRAME_SIZE = 2048
#     HOP_SIZE = 512
#     S_scale = librosa.stft(data, n_fft=FRAME_SIZE, hop_length=HOP_SIZE)
#     Y_scale = np.abs(S_scale) ** 2
#     Y_log_scale = librosa.power_to_db(Y_scale)
#     SignalFigure, SignalAxis = plt.subplots(1, 1)
#     librosa.display.specshow(Y_log_scale, 
#                              sr=samplerate, 
#                              hop_length=HOP_SIZE, 
#                              x_axis="time")
#     plt.colorbar(format="%+2.f")
#     st.plotly_chart(SignalFigure,use_container_width=True)
    
    

def handled_audio
 # a = AudioSegment.from_wav(uploaded_file)
    # samples = a.get_array_of_samples()
    # fp_arr = np.array(samples).T.astype(np.float32)
    # fp_arr /= np.iinfo(samples.typecode).max
    
    # return fp_arr, 44100 #48000 #22050 


 # SignalFigure, SignalAxis = plt.subplots(1, 1)
    # SignalAxis.plot(x_axis,y_axis)

    # if var=='original':
    #     plt.xlabel('Time [s]')
    # else:
    #     plt.xlabel('Frequency [Hz]')

    # plt.ylabel('Amplitude')
    
    # st.plotly_chart(SignalFigure,use_container_width=True)


       
#-----------------------------------------------------------------------Vowels---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

      if  option=='Vowels Mode':
         slidersNum=10
         # freq_axis_list, amplitude_axis_list,bin_max_frequency_value=functions.bins_separation(frequencies, amplitude ,slidersNum=10)
         # sliders_data= functions.generate_sliders(bin_max_frequency_value,slidersNum=10)
         # mod_amplitude_axis_list,empty= functions.signal_modification(sliders_data,amplitude_axis_list,slidersNum=10)
         # frequency= frequencies[:len(mod_amplitude_axis_list):1]
            
               
      #----------------------------------------------------------------------Musical Instruments Mode-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------       

      elif option=='Musical Instruments Mode' :
         mod_amplitude_axis_list,empty= functions.instruments(amplitude,frequencies,samplerate)



      #----------------------------------------------------------------------Biosignal------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      elif option=='Biological Signal Abnormalities':
         slidersNum=4
         # freq_axis_list, amplitude_axis_list,bin_max_frequency_value=functions.bins_separation(frequencies, amplitude ,slidersNum=4)
         # sliders_data= functions.generate_sliders(bin_max_frequency_value,slidersNum=4)
         # mod_amplitude_axis_list,empty= functions.signal_modification(sliders_data,amplitude_axis_list,slidersNum=4)
               
         
      #-----------------------------------------------------------------------audio-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      elif option=='Uniform Range Mode':
         slidersNum=10
         # freq_axis_list, amplitude_axis_list,bin_max_frequency_value=functions.bins_separation(frequencies, amplitude ,slidersNum=10)
         # sliders_data= functions.generate_sliders(bin_max_frequency_value,slidersNum=10)
         # mod_amplitude_axis_list,empty= functions.signal_modification(sliders_data,amplitude_axis_list,slidersNum=10)
      #------------------------------------------------------------------------Static-plotting--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def plot_signal(time,data,freq,amp):

    if data.ndim==1:
        SignalFigure, SignalAxis = plt.subplots(1, 2,figsize=(30, 10))
        SignalAxis[0].plot(time,data)
        SignalAxis[1].plot(freq,amp)
        SignalAxis[0].set_xlabel(xlabel='Time [sec]', size=25)
        SignalAxis[0].set_ylabel(ylabel='Amp litude', size=25)
        SignalAxis[0].set_title("Time representation", fontsize=30)

        SignalAxis[1].set_xlabel(xlabel='Frequency [Hz]', size=25)
        SignalAxis[1].set_ylabel(ylabel='Amplitude [dB]', size=25)
        SignalAxis[1].set_title("Frequency representation", fontsize=30)

        st.pyplot(SignalFigure)
    else:
        data_1=[]
        data_2=[]
        for i in range(data.shape[0]):
            data_1.append(data[i][0])
            data_2.append(data[i][1])
        data_1=np.array(data_1)
        data_2=np.array(data_2)
        data=data_1
        SignalFigure, SignalAxis = plt.subplots(1, 2,figsize=(30, 10))
        SignalAxis[0].plot(time,data)
        SignalAxis[1].plot(freq,amp)
        SignalAxis[0].set_xlabel(xlabel='Time [sec]', size=25)
        SignalAxis[0].set_ylabel(ylabel='Amp litude', size=25)
        SignalAxis[0].set_title("Time representation", fontsize=30)
        
        SignalAxis[1].set_xlabel(xlabel='Frequency [Hz]', size=25)
        SignalAxis[1].set_ylabel(ylabel='Amplitude [dB]', size=25)
        SignalAxis[1].set_title("Frequency representation", fontsize=30)
        
        st.pyplot(SignalFigure)




def instruments( amplitude, frequencies, sample_rate):
    empty = st.empty()
    empty.empty()
    points_per_freq=len(frequencies) /(sample_rate / 2)
    columns = st.columns(3)
    with columns[0]:
        slider1=svs.vertical_slider(key=1, default_value=1, step=1, min_value=0, max_value=10)
        st.write("Xylo")
        if slider1 == None:
            slider1 = 1
        max_freq_1=650
        min_freq_1=300
        max_freq_2=6000
        min_freq_2=3500
        amplitude[int(min_freq_1*points_per_freq):int(max_freq_1*points_per_freq)]*=slider1
        amplitude[int(min_freq_2*points_per_freq):int(max_freq_2*points_per_freq)]*=slider1

    with columns[1]:
        slider2=svs.vertical_slider(key=2, default_value=1, step=1, min_value=0, max_value=10)
        st.write("Contrabass")
        if slider2 == None:
            slider2 = 1
            # sliders_data.append(slider)
        max_freq=3500
        min_freq=700
        amplitude[int(min_freq*points_per_freq):int(max_freq*points_per_freq)]*=slider2
    with columns[2]:
        slider3=svs.vertical_slider(key=3, default_value=1, step=1, min_value=0, max_value=10)
        st.write("Drums")
        if slider3 == None:
            slider3 = 1
            # sliders_data.append(slider)
        max_freq=17000
        min_freq=6000
        max_freq_2=300
        min_freq_2=10
        max_freq_3=700
        min_freq_3=600
        amplitude[int(min_freq*points_per_freq):int(max_freq*points_per_freq)]*=slider3
        amplitude[int(min_freq_2*points_per_freq):int(max_freq_2*points_per_freq)]*=slider3
        amplitude[int(min_freq_3*points_per_freq):int(max_freq_3*points_per_freq)]*=slider3

    return amplitude,empty